tCat
#9) Mileuristas. Porcentajes
prop.table(t2)
prop.table(tSexo)
prop.table(tCat)
#10.1) Empleados top
cat("\014")
emTop = empleados[order(empleados$Sueldo,decreasing = TRUE),]
em50 = emTop[1:50,]
prop.table(table(em50$Categoría,em50$Sexo))
#10.2)
mean(em50$Sueldo[em50$Sexo=="M"])-mean(em50$Sueldo[em50$Sexo=="F"])
#10,3)
barplot(table(em50$Sexo),
col=c("blue","orange"),
legend.text=c("Mujeres","Hombres"),
args.legend = list(x=0.8,y=40,cex=1),
xlab="Sexos",ylab="Número",
ylim=c(0,35))
pie(prop.table(table(em50$Sexo)),
col=c("blue","orange"),
labels=paste(as.character(100*prop.table(table(em50$Sexo))),"%"),
)
legend("left",c("Mujer","Hombre"),fill=c("blue","orange"))
pediatria=read.csv("pediatria.csv",header=TRUE,dec=",")
pediatria=read.csv("pediatria.csv",header=TRUE,dec=",")
[# cargando los valores del fichero resultado
# cargando los valores del fichero resultado
calificaciones = read.csv("resultado.csv",header=FALSE,dec=",")
head(calificaciones)
# cargando los valores del fichero resultado
calificaciones = read.csv("resultado.csv",header=FALSE,dec=",")
head(calificaciones)
# cambio de nombre
names(calificaciones)=c("Notas","Sexo")
# ¿cuántos opositores?
dim(calificaciones)[1]
str(calificaciones)
# Nota más baja
min(calificaciones$Notas)
# Nota más alta
max(calificaciones$Notas)
# Filas en las que están los ceros
which(calificaciones$Notas==0)
calificaciones$Sexo[which(calificaciones$Notas==0)] # sexos de esa personas
# Notas máximas
which(calificaciones$Notas==9.98)
calificaciones$Sexo[which(calificaciones$Notas==9.98)] # sexos de esa personas
calificaciones$Sexo[which(calificaciones$Notas==max(calificaciones$Notas))] # sexos de esa personas
# ¿Cuántos han aprobado?
length(which(calificaciones$Notas>=5))
length(which(calificaciones$Notas>=5 & calificaciones$Sexo=="F"))
length(which(calificaciones$Notas>=5 & calificaciones$Sexo=="M"))
#Tabla de calificaciones absolutas
t1 = table(calificaciones$Sexo)
t1["F"]
prop.table(t1)
# Calificaciones de los 23 primeros
calOrdenadas=calificaciones[order(calificaciones$Notas,decreasing = TRUE),]
mejores=calOrdenadas[1:23,]
min(mejores$Notas)
# Mujeres que han aprobado
t2=table(mejores$Sexo)
t2
prop.table(t2)
# Gráficas
barplot(table(calificaciones$Sexo),col=c("green","blue"),
legend.text = c("Mujer","Hombre"),
args.legend = list(x=0.5,y=600,cex=1),
xlab="Sexos",ylab="Números")
pie(table(calificaciones$Sexo),col=c("green","red"))
# Ejercicio con vectores y dataframe (Cap 8)
# ==========================================
#1)
empleados = read.csv("datos_ejercicio.csv",header=FALSE)
head(empleados,20)
#2) Cambiar nombre campos
names(empleados)=c("Categoría","Sexo","Sueldo")
#4) Descripción del dataframe
cat("\014")
str(empleados)
#5) Sueldo más bajo
min(empleados$Sueldo)
empleados[which(empleados$Sueldo==min(empleados$Sueldo)),]
#6) Sueldo más bajo
max(empleados$Sueldo)
empleados[which(empleados$Sueldo==max(empleados$Sueldo)),]
#7) Mileuristas
cat("\014")
dim(empleados[empleados$Sueldo<1000,])
#7.1)
dim(empleados[empleados$Sueldo<1000 & empleados$Sexo=="F",])
dim(empleados[empleados$Sueldo<1000 & empleados$Sexo=="M",])
#7.2)
dim(empleados[empleados$Sueldo<1000 & empleados$Categoría=="I",])
dim(empleados[empleados$Sueldo<1000 & empleados$Categoría=="II",])
dim(empleados[empleados$Sueldo<1000 & empleados$Categoría=="III",])
#8) Mileuristas
e2=empleados[empleados$Sueldo<1000,]
t2=table(e2$Sexo,e2$Categoría) #todavía puede que no lo hagan así
tSexo=table(e2$Sexo)
tCat=table(e2$Categoría)
t2
tSexo
tCat
#9) Mileuristas. Porcentajes
prop.table(t2)
prop.table(tSexo)
prop.table(tCat)
#10.1) Empleados top
cat("\014")
emTop = empleados[order(empleados$Sueldo,decreasing = TRUE),]
em50 = emTop[1:50,]
prop.table(table(em50$Categoría,em50$Sexo))
#10.2)
mean(em50$Sueldo[em50$Sexo=="M"])-mean(em50$Sueldo[em50$Sexo=="F"])
#10,3)
barplot(table(em50$Sexo),
col=c("blue","orange"),
legend.text=c("Mujeres","Hombres"),
args.legend = list(x=0.8,y=40,cex=1),
xlab="Sexos",ylab="Número",
ylim=c(0,35))
pie(prop.table(table(em50$Sexo)),
col=c("blue","orange"),
labels=paste(as.character(100*prop.table(table(em50$Sexo))),"%"),
)
legend("left",c("Mujer","Hombre"),fill=c("blue","orange"))
# Ejercicio con vectores y dataframe (Cap 8)
# ==========================================
#1)
empleados = read.csv("datos_ejercicio.csv",header=FALSE)
head(empleados,20)
#2) Cambiar nombre campos
names(empleados)=c("Categoría","Sexo","Sueldo")
#4) Descripción del dataframe
cat("\014")
str(empleados)
#5) Sueldo más bajo
min(empleados$Sueldo)
empleados[which(empleados$Sueldo==min(empleados$Sueldo)),]
#6) Sueldo más bajo
max(empleados$Sueldo)
empleados[which(empleados$Sueldo==max(empleados$Sueldo)),]
#7) Mileuristas
cat("\014")
dim(empleados[empleados$Sueldo<1000,])
#7.1)
dim(empleados[empleados$Sueldo<1000 & empleados$Sexo=="F",])
dim(empleados[empleados$Sueldo<1000 & empleados$Sexo=="M",])
#7.2)
dim(empleados[empleados$Sueldo<1000 & empleados$Categoría=="I",])
dim(empleados[empleados$Sueldo<1000 & empleados$Categoría=="II",])
dim(empleados[empleados$Sueldo<1000 & empleados$Categoría=="III",])
#8) Mileuristas
e2=empleados[empleados$Sueldo<1000,]
t2=table(e2$Sexo,e2$Categoría) #todavía puede que no lo hagan así
tSexo=table(e2$Sexo)
tCat=table(e2$Categoría)
t2
tSexo
tCat
#9) Mileuristas. Porcentajes
prop.table(t2)
prop.table(tSexo)
prop.table(tCat)
#10.1) Empleados top
cat("\014")
emTop = empleados[order(empleados$Sueldo,decreasing = TRUE),]
em50 = emTop[1:50,]
prop.table(table(em50$Categoría,em50$Sexo))
#10.2)
mean(em50$Sueldo[em50$Sexo=="M"])-mean(em50$Sueldo[em50$Sexo=="F"])
#10,3)
barplot(table(em50$Sexo),
col=c("blue","orange"),
legend.text=c("Mujeres","Hombres"),
args.legend = list(x=0.8,y=40,cex=1),
xlab="Sexos",ylab="Número",
ylim=c(0,35))
pie(prop.table(table(em50$Sexo)),
col=c("blue","orange"),
labels=paste(as.character(100*prop.table(table(em50$Sexo))),"%"),
)
legend("left",c("Mujer","Hombre"),fill=c("blue","orange"))
# Ejercicio con vectores y dataframe (Cap 8)
# ==========================================
#1)
empleados = read.csv("datos_ejercicio.csv",header=FALSE)
head(empleados,20)
#2) Cambiar nombre campos
names(empleados)=c("Categoría","Sexo","Sueldo")
#4) Descripción del dataframe
cat("\014")
str(empleados)
#5) Sueldo más bajo
min(empleados$Sueldo)
empleados[which(empleados$Sueldo==min(empleados$Sueldo)),]
#6) Sueldo más bajo
max(empleados$Sueldo)
empleados[which(empleados$Sueldo==max(empleados$Sueldo)),]
#7) Mileuristas
cat("\014")
dim(empleados[empleados$Sueldo<1000,])
#7.1)
dim(empleados[empleados$Sueldo<1000 & empleados$Sexo=="F",])
dim(empleados[empleados$Sueldo<1000 & empleados$Sexo=="M",])
#7.2)
dim(empleados[empleados$Sueldo<1000 & empleados$Categoría=="I",])
dim(empleados[empleados$Sueldo<1000 & empleados$Categoría=="II",])
dim(empleados[empleados$Sueldo<1000 & empleados$Categoría=="III",])
#8) Mileuristas
e2=empleados[empleados$Sueldo<1000,]
t2=table(e2$Sexo,e2$Categoría) #todavía puede que no lo hagan así
tSexo=table(e2$Sexo)
tCat=table(e2$Categoría)
t2
tSexo
tCat
#9) Mileuristas. Porcentajes
prop.table(t2)
prop.table(tSexo)
prop.table(tCat)
#10.1) Empleados top
cat("\014")
emTop = empleados[order(empleados$Sueldo,decreasing = TRUE),]
em50 = emTop[1:50,]
prop.table(table(em50$Categoría,em50$Sexo))
#10.2)
mean(em50$Sueldo[em50$Sexo=="M"])-mean(em50$Sueldo[em50$Sexo=="F"])
#10,3)
barplot(table(em50$Sexo),
col=c("blue","orange"),
legend.text=c("Mujeres","Hombres"),
args.legend = list(x=0.8,y=40,cex=1),
xlab="Sexos",ylab="Número",
ylim=c(0,35))
pie(prop.table(table(em50$Sexo)),
col=c("blue","orange"),
labels=paste(as.character(100*prop.table(table(em50$Sexo))),"%"),
)
legend("left",c("Mujer","Hombre"),fill=c("blue","orange"))
# Ejercicio con vectores y dataframe (Cap 8)
# ==========================================
#1)
empleados = read.csv("datos_ejercicio.csv",header=FALSE)
head(empleados,20)
#2) Cambiar nombre campos
names(empleados)=c("Categoría","Sexo","Sueldo")
View(empleados)
#4) Descripción del dataframe
cat("\014")
str(empleados)
which(empleados$Sueldo==min(empleados$Sueldo))
#5) Sueldo más bajo
min(empleados$Sueldo)
empleados[which(empleados$Sueldo==min(empleados$Sueldo)),]
#6) Sueldo más bajo
max(empleados$Sueldo)
empleados[which(empleados$Sueldo==max(empleados$Sueldo)),]
#7) Mileuristas
cat("\014")
dim(empleados[empleados$Sueldo<1000,])
#7.1)
dim(empleados[empleados$Sueldo<1000 & empleados$Sexo=="F",])
dim(empleados[empleados$Sueldo<1000 & empleados$Sexo=="M",])
#7.2)
dim(empleados[empleados$Sueldo<1000 & empleados$Categoría=="I",])
dim(empleados[empleados$Sueldo<1000 & empleados$Categoría=="II",])
dim(empleados[empleados$Sueldo<1000 & empleados$Categoría=="III",])
#8) Mileuristas
e2=empleados[empleados$Sueldo<1000,]
t2=table(e2$Sexo,e2$Categoría) #todavía puede que no lo hagan así
tSexo=table(e2$Sexo)
tCat=table(e2$Categoría)
t2
tSexo
tCat
#9) Mileuristas. Porcentajes
prop.table(t2)
prop.table(tSexo)
prop.table(tCat)
#10.1) Empleados top
cat("\014")
emTop = empleados[order(empleados$Sueldo,decreasing = TRUE),]
em50 = emTop[1:50,]
prop.table(table(em50$Categoría,em50$Sexo))
#10.2)
mean(em50$Sueldo[em50$Sexo=="M"])-mean(em50$Sueldo[em50$Sexo=="F"])
#10,3)
barplot(table(em50$Sexo),
col=c("blue","orange"),
legend.text=c("Mujeres","Hombres"),
args.legend = list(x=0.8,y=40,cex=1),
xlab="Sexos",ylab="Número",
ylim=c(0,35))
pie(prop.table(table(em50$Sexo)),
col=c("blue","orange"),
labels=paste(as.character(100*prop.table(table(em50$Sexo))),"%"),
)
legend("left",c("Mujer","Hombre"),fill=c("blue","orange"))
# Ejercicio con vectores y dataframe (Cap 8)
# ==========================================
#1)
empleados = read.csv("datos_ejercicio.csv",header=FALSE)
head(empleados,20)
# Ejercicio con vectores y dataframe (Cap 8)
# ==========================================
#1)
empleados = read.csv("datos_ejercicio.csv",header=FALSE)
head(empleados,20)
#2) Cambiar nombre campos
names(empleados)=c("Categoría","Sexo","Sueldo")
#4) Descripción del dataframe
cat("\014")
str(empleados)
#5) Sueldo más bajo
min(empleados$Sueldo)
empleados[which(empleados$Sueldo==min(empleados$Sueldo)),]
#6) Sueldo más bajo
max(empleados$Sueldo)
empleados[which(empleados$Sueldo==max(empleados$Sueldo)),]
#7) Mileuristas
cat("\014")
dim(empleados[empleados$Sueldo<1000,])
#7.1)
dim(empleados[empleados$Sueldo<1000 & empleados$Sexo=="F",])
dim(empleados[empleados$Sueldo<1000 & empleados$Sexo=="M",])
#7.2)
dim(empleados[empleados$Sueldo<1000 & empleados$Categoría=="I",])
dim(empleados[empleados$Sueldo<1000 & empleados$Categoría=="II",])
dim(empleados[empleados$Sueldo<1000 & empleados$Categoría=="III",])
table(empleados$Sexo[which(empleados$Sueldo<1000)])
empleados$Sexo[which(empleados$Sueldo<1000)]
#8) Mileuristas
e2=empleados[empleados$Sueldo<1000,]
t2=table(e2$Sexo,e2$Categoría) #todavía puede que no lo hagan así
tSexo=table(e2$Sexo)
tCat=table(e2$Categoría)
t2
tSexo
tCat
tSexo
tCat
#9) Mileuristas. Porcentajes
prop.table(t2)
prop.table(tSexo)
prop.table(tCat)
checksOrdenados =
empleados[order(empleados$Sueldo,decreasing =
TRUE),]
checksOrdenados = head(checksOrdenados,50)
table(checksOrdenados)
prop.table(table(checksOrdenados$Sexo))
prop.table(table(checksOrdenados$Categoría))
checksOrdenados
# Ejercicio con vectores y dataframe (Cap 8)
# ==========================================
#1)
empleados = read.csv("datos_ejercicio.csv",header=FALSE)
head(empleados,20)
#2) Cambiar nombre campos
names(empleados)=c("Categoría","Sexo","Sueldo")
#4) Descripción del dataframe
cat("\014")
str(empleados)
#5) Sueldo más bajo
min(empleados$Sueldo)
empleados[which(empleados$Sueldo==min(empleados$Sueldo)),]
#6) Sueldo más bajo
max(empleados$Sueldo)
empleados[which(empleados$Sueldo==max(empleados$Sueldo)),]
#7) Mileuristas
cat("\014")
dim(empleados[empleados$Sueldo<1000,])
#7.1)
dim(empleados[empleados$Sueldo<1000 & empleados$Sexo=="F",])
dim(empleados[empleados$Sueldo<1000 & empleados$Sexo=="M",])
#7.2)
dim(empleados[empleados$Sueldo<1000 & empleados$Categoría=="I",])
dim(empleados[empleados$Sueldo<1000 & empleados$Categoría=="II",])
dim(empleados[empleados$Sueldo<1000 & empleados$Categoría=="III",])
#8) Mileuristas
e2=empleados[empleados$Sueldo<1000,]
t2=table(e2$Sexo,e2$Categoría) #todavía puede que no lo hagan así
tSexo=table(e2$Sexo)
tCat=table(e2$Categoría)
t2
tSexo
tCat
#9) Mileuristas. Porcentajes
prop.table(t2)
prop.table(tSexo)
prop.table(tCat)
#10.1) Empleados top
cat("\014")
emTop = empleados[order(empleados$Sueldo,decreasing = TRUE),]
em50 = emTop[1:50,]
prop.table(table(em50$Categoría,em50$Sexo))
#10.2)
mean(em50$Sueldo[em50$Sexo=="M"])-mean(em50$Sueldo[em50$Sexo=="F"])
#10,3)
barplot(table(em50$Sexo),
col=c("blue","orange"),
legend.text=c("Mujeres","Hombres"),
args.legend = list(x=0.8,y=40,cex=1),
xlab="Sexos",ylab="Número",
ylim=c(0,35))
pie(prop.table(table(em50$Sexo)),
col=c("blue","orange"),
labels=paste(as.character(100*prop.table(table(em50$Sexo))),"%"),
)
legend("left",c("Mujer","Hombre"),fill=c("blue","orange"))
graf1 <-barplot(table(em50$Sexo),
col=c("blue","orange"),
legend.text=c("Mujeres","Hombres"),
args.legend = list(x=0.8,y=40,cex=1),
xlab="Sexos",ylab="Número",
ylim=c(0,35))
text(x=graf1,y=table(em50$Sexo))
graf1 <-barplot(table(em50$Sexo),
col=c("blue","orange"),
legend.text=c("Mujeres","Hombres"),
args.legend = list(x=0.8,y=40,cex=1),
xlab="Sexos",ylab="Número",
ylim=c(0,35))
text(x=graf1,y=em50$Sexo)
table(em50$Sexo)
as.numeric(table(em50$Sexo))
graf1 <-barplot(table(em50$Sexo),
col=c("blue","orange"),
legend.text=c("Mujeres","Hombres"),
args.legend = list(x=0.8,y=40,cex=1),
xlab="Sexos",ylab="Número",
ylim=c(0,35))
text(x=graf1,y=as.numeric(table(em50$Sexo)))
str(table(em50$Sexo))
as.numeric(as.character(table(em50$Sexo)))
graf1 <-barplot(table(em50$Sexo),
col=c("blue","orange"),
legend.text=c("Mujeres","Hombres"),
args.legend = list(x=0.8,y=40,cex=1),
xlab="Sexos",ylab="Número",
ylim=c(0,35))
text(x=graf1,y=as.numeric(as.character(table(em50$Sexo))))
graf1 <-barplot(table(em50$Sexo),
col=c("blue","orange"),
legend.text=c("Mujeres","Hombres"),
args.legend = list(x=0.8,y=40,cex=1),
xlab="Sexos",ylab="Número",
ylim=c(0,35))
text(x=graf1,y=table(em50$Sexo)+1,labels=table(em50$Sexo))
graf1 <-barplot(table(em50$Sexo),
col=c("blue","orange"),
legend.text=c("Mujeres","Hombres"),
args.legend = list(x=0.8,y=40,cex=1),
xlab="Sexos",ylab="Número",
ylim=c(0,35))
text(x=graf1,y=table(em50$Sexo)+2,labels=table(em50$Sexo))
par = old.par
# Ejercicio 9. Problema Fútbol
# =============================
futbol = read.csv("Cap_09_Problemas_cualitativos_bidimensionales/futbol.csv",header=TRUE)
# Añado los partidos
futbol = rbind(futbol,data.frame(Casa=c(10,11,10),Visitante=c(0,8,9)))
tail(futbol)
# Añado la columna QUNIELA
cat("\014")
futbol$Quiniela = ((futbol$Casa-futbol$Visitante)>0)*1+((futbol$Casa-futbol$Visitante)<0)*2
futbol$Quiniela = as.factor(futbol$Quiniela)
levels(futbol$Quiniela)=c("X","1","2")
head(futbol,10)
str(futbol)
# Frecuencias absoluta y relativa
t1 = table(futbol$Casa,futbol$Visitante)
t2 = 100*prop.table(t1)
# Resultados que nunca se han producido
# Convierto la tabla de frecuencias relativas en dataframe
resultados=data.frame(t1)
resultados[resultados$Freq==0,]
n=dim(resultados[resultados$Freq==0,])[1]
# Resultado más frecuente
resultados[which(resultados$Freq==max(resultados$Freq)),]
# Frecuencia acumulada de partidos en los que el equipo de casa no marca. MARGIN=1
t3 = t(apply(t1,MARGIN=1,FUN=sum)) # Mostrar t(t3)
t4 = t(apply(prop.table(t1),MARGIN=1,FUN=sum)) #obtiene la suma total. Mostrar t(t4)
# t4 = t(apply(prop.table(t1),MARGIN=1,FUN=cumsum)) con la suma acumulada
t4[1,"0"]
# Frecuencia acumulada de partidos en los que el equipo visitante no marca. MARGIN=2
t5 = t(apply(prop.table(t1),MARGIN=2,FUN=sum)) #obtiene la suma total. Mostrar t(t5)
# t4 = t(apply(prop.table(t1),MARGIN=1,FUN=cumsum)) con la suma acumulada
t5[1,"0"]
# Gráfica de los partidos cuyo resultado es  0 - X, según los goles de los visitantes
partidos0X = t1["0",]
colores=topo.colors(length(partidos0X))
old.par=par()
par=(mar=c(0,0,0,0))
migrafica = barplot(partidos0X,main="Nº partidos 0-X ",beside=TRUE,xlab="X",ylab="Nº partidos",
horiz=FALSE,col=colores, ylim=c(0,max(partidos0X)+20),
legend.text =names(t1["0",]),
args.legend = list(x=20,y=40,cex=0.5,horiz=TRUE,text.col="darkgreen"))
text(migrafica, partidos0X + 0.1 , partidos0X, cex=0.6,pos=3)
par = old.par
# Ejercicio 9. Problema Fútbol
# =============================
futbol = read.csv("futbol.csv",header=TRUE)
# Ejercicio 9. Problema Fútbol
# =============================
futbol = read.csv("futbol.csv",header=TRUE)
# Ejercicio 9. Problema Fútbol
# =============================
futbol = read.csv("futbol.csv",header=TRUE)
